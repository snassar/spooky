name: Lint

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-changes:
    name: Check for Go file changes
    runs-on: ubuntu-latest
    outputs:
      has-go-changes: ${{ steps.check.outputs.has-go-changes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required to get the full history for diff

    - name: Check for Go file changes
      id: check
      run: |
        # Get list of changed .go files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare with base branch
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.go$' || true)
        else
          # For pushes, compare with previous commit
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.go$' || true)
        fi
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "Go files changed:"
          echo "$CHANGED_FILES"
          echo "has-go-changes=true" >> $GITHUB_OUTPUT
        else
          echo "No Go files changed, skipping lint job"
          echo "has-go-changes=false" >> $GITHUB_OUTPUT
        fi

  lint:
    name: Lint Changed Go Files
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.has-go-changes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Install golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Get changed Go files and packages
      id: changed-files
      run: |
        # Get list of changed .go files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare with base branch
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.go$')
        else
          # For pushes, compare with previous commit
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.go$')
        fi
        
        echo "Changed Go files:"
        echo "$CHANGED_FILES"
        
        # Extract unique directories containing changed files
        if [ -n "$CHANGED_FILES" ]; then
          CHANGED_DIRS=$(echo "$CHANGED_FILES" | xargs -I {} dirname {} | sort -u | tr '\n' ' ')
          echo "Changed directories: $CHANGED_DIRS"
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_OUTPUT
        else
          echo "No Go files changed"
          echo "changed_dirs=" >> $GITHUB_OUTPUT
        fi

    - name: Run golangci-lint on changed packages
      run: |
        if [ -n "${{ steps.changed-files.outputs.changed_dirs }}" ]; then
          echo "Running golangci-lint on changed packages: ${{ steps.changed-files.outputs.changed_dirs }}"
          # Run golangci-lint on each changed directory
          for dir in ${{ steps.changed-files.outputs.changed_dirs }}; do
            if [ -d "$dir" ]; then
              echo "Linting package: $dir"
              golangci-lint run --timeout=5m "./$dir/..."
            fi
          done
        else
          echo "No Go packages to lint"
        fi

    - name: Check code formatting
      run: |
        # Check formatting only for changed files
        if [ -n "${{ steps.changed-files.outputs.changed_dirs }}" ]; then
          UNFORMATTED_FILES=""
          for dir in ${{ steps.changed-files.outputs.changed_dirs }}; do
            if [ -d "$dir" ]; then
              DIR_FILES=$(gofmt -s -l "$dir"/*.go 2>/dev/null || true)
              if [ -n "$DIR_FILES" ]; then
                UNFORMATTED_FILES="$UNFORMATTED_FILES $DIR_FILES"
              fi
            fi
          done
          
          if [ -n "$UNFORMATTED_FILES" ]; then
            echo "Code is not formatted. Please run 'gofmt -s -w .'"
            echo "Unformatted files: $UNFORMATTED_FILES"
            exit 1
          fi
        fi

    - name: Check for unused dependencies
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "go.mod or go.sum has uncommitted changes. Please run 'go mod tidy'"
          git status
          exit 1
        fi 