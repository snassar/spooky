name: Integration Tests with Podman

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'tests/integration/**'
      - 'internal/**'
      - 'main.go'
      - '.github/workflows/integration-tests.yml'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Install Podman
      run: |
        # Install Podman
        sudo apt-get update
        sudo apt-get install -y podman
        
        # Verify installation
        podman --version

    - name: Configure Podman for rootless operation
      run: |
        # Enable user namespaces
        echo 'kernel.unprivileged_userns_clone=1' | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p
        
        # Configure subuid/subgid for the runner user
        sudo usermod --add-subuids 100000-165535 $USER
        sudo usermod --add-subgids 100000-165535 $USER
        
        # Create podman configuration directory
        mkdir -p ~/.config/containers
        
        # Configure podman for rootless operation
        cat > ~/.config/containers/containers.conf << EOF
        [engine]
        active_service = "podman"
        
        [engine.service_destinations]
        [engine.service_destinations.podman]
        uri = "unix:///run/user/\${UID}/podman/podman.sock"
        
        [engine.service_destinations.podman.connection_timeout_seconds]
        uri = 20
        
        [engine.service_destinations.podman.connection_override]
        uri = "unix:///run/user/\${UID}/podman/podman.sock"
        EOF

    - name: Generate SSH key pair
      run: |
        # Generate SSH key without passphrase
        ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N "" -C "github-actions@spooky"
        
        # Set proper permissions
        chmod 600 ~/.ssh/id_ed25519
        chmod 644 ~/.ssh/id_ed25519.pub
        
        # Add to SSH agent
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_ed25519
        
        # Display public key for debugging
        echo "Generated SSH public key:"
        cat ~/.ssh/id_ed25519.pub

    - name: Create SSH-enabled Debian container
      run: |
        # Create a Dockerfile for SSH-enabled Debian
        cat > Dockerfile.ssh << 'EOF'
        FROM debian:12-slim
        
        # Install SSH server and required packages
        RUN apt-get update && apt-get install -y \
            openssh-server \
            sudo \
            curl \
            wget \
            vim \
            && rm -rf /var/lib/apt/lists/*
        
        # Create SSH directory
        RUN mkdir -p /var/run/sshd
        
        # Create test user
        RUN useradd -m -s /bin/bash testuser && \
            echo "testuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
        
        # Create .ssh directory for testuser
        RUN mkdir -p /home/testuser/.ssh && \
            chown testuser:testuser /home/testuser/.ssh && \
            chmod 700 /home/testuser/.ssh
        
        # Copy SSH public key
        COPY id_ed25519.pub /home/testuser/.ssh/authorized_keys
        RUN chown testuser:testuser /home/testuser/.ssh/authorized_keys && \
            chmod 600 /home/testuser/.ssh/authorized_keys
        
        # Configure SSH
        RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config && \
            sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config && \
            sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && \
            sed -i 's/#AuthorizedKeysFile/AuthorizedKeysFile/' /etc/ssh/sshd_config && \
            echo "StrictModes no" >> /etc/ssh/sshd_config
        
        # Expose SSH port
        EXPOSE 22
        
        # Start SSH daemon
        CMD ["/usr/sbin/sshd", "-D"]
        EOF
        
        # Copy SSH public key to build context
        cp ~/.ssh/id_ed25519.pub .
        
        # Build the SSH-enabled image
        podman build -f Dockerfile.ssh -t spooky-test-ssh .
        
        # Verify image was created
        podman images

    - name: Pre-flight environment check
      run: |
        echo "=== Pre-flight Environment Check ==="
        
        # Check Podman installation
        echo "Podman version:"
        podman --version
        
        # Check if ports are already in use
        echo "Checking if required ports are available..."
        if netstat -tlnp 2>/dev/null | grep -q ":2221"; then
          echo "✗ Port 2221 is already in use:"
          netstat -tlnp 2>/dev/null | grep ":2221"
          echo "Stopping any existing containers..."
          podman stop spooky-test-server 2>/dev/null || true
          podman rm spooky-test-server 2>/dev/null || true
          sleep 2
        else
          echo "✓ Port 2221 is available"
        fi
        
        # Check SSH key exists
        if [ ! -f ~/.ssh/id_ed25519 ]; then
          echo "✗ SSH private key not found"
          exit 1
        else
          echo "✓ SSH private key exists"
        fi
        
        if [ ! -f ~/.ssh/id_ed25519.pub ]; then
          echo "✗ SSH public key not found"
          exit 1
        else
          echo "✓ SSH public key exists"
        fi
        
        # Check SSH key permissions
        if [ "$(stat -c %a ~/.ssh/id_ed25519)" != "600" ]; then
          echo "✗ SSH private key has wrong permissions: $(stat -c %a ~/.ssh/id_ed25519)"
          exit 1
        else
          echo "✓ SSH private key has correct permissions"
        fi
        
        # Check available disk space
        echo "Available disk space:"
        df -h .
        
        # Check available memory
        echo "Available memory:"
        free -h
        
        echo "=== Pre-flight Check Complete ==="

    - name: Start SSH container
      run: |
        # Start the SSH container on port 2221 (matching test config)
        podman run -d \
          --name spooky-test-server \
          -p 2221:22 \
          spooky-test-ssh
        
        echo "Container started, beginning health checks..."
        
        # Wait for container to be ready and check health
        echo "Waiting for container to be ready..."
        for i in {1..30}; do
          if podman ps --filter name=spooky-test-server --format "{{.Status}}" | grep -q "Up"; then
            echo "Container is running (attempt $i/30)"
            break
          fi
          echo "Waiting for container to start... (attempt $i/30)"
          sleep 2
        done
        
        # Verify container is running
        echo "=== Container Status ==="
        podman ps --filter name=spooky-test-server
        
        # Check container health
        echo "=== Container Health Check ==="
        CONTAINER_HEALTH=$(podman inspect spooky-test-server --format='{{.State.Health.Status}}' 2>/dev/null || echo "no-health-check")
        echo "Container health status: $CONTAINER_HEALTH"
        
        # Get container IP
        CONTAINER_IP=$(podman inspect spooky-test-server --format='{{.NetworkSettings.IPAddress}}')
        echo "Container IP: $CONTAINER_IP"
        
        # Check if SSH port is listening
        echo "=== Port Availability Check ==="
        if netstat -tlnp 2>/dev/null | grep -q ":2221"; then
          echo "✓ Port 2221 is listening"
        else
          echo "✗ Port 2221 is not listening"
          echo "Checking what's listening on port 2221:"
          netstat -tlnp 2>/dev/null | grep ":2221" || echo "Nothing found"
        fi
        
        # Check SSH daemon is running inside container
        echo "=== SSH Daemon Check ==="
        if podman exec spooky-test-server ps aux | grep -q "sshd"; then
          echo "✓ SSH daemon is running inside container"
        else
          echo "✗ SSH daemon not found in container"
          echo "Processes in container:"
          podman exec spooky-test-server ps aux
        fi
        
        # Check SSH configuration
        echo "=== SSH Configuration Check ==="
        echo "SSH config file contents:"
        podman exec spooky-test-server cat /etc/ssh/sshd_config | grep -E "(Port|PermitRootLogin|PubkeyAuthentication|PasswordAuthentication|AuthorizedKeysFile)" || echo "Could not read SSH config"
        
        # Check authorized_keys
        echo "=== SSH Key Check ==="
        echo "Authorized keys in container:"
        podman exec spooky-test-server cat /home/testuser/.ssh/authorized_keys || echo "Could not read authorized_keys"
        
        echo "Local SSH key (first few lines):"
        head -5 ~/.ssh/id_ed25519.pub
        
        # Test SSH connection with retry logic
        echo "=== SSH Connection Test ==="
        SSH_SUCCESS=false
        for attempt in {1..5}; do
          echo "SSH connection attempt $attempt/5..."
          if ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes -p 2221 testuser@localhost "echo 'SSH connection successful - attempt $attempt'" 2>&1; then
            echo "✓ SSH connection successful on attempt $attempt"
            SSH_SUCCESS=true
            break
          else
            echo "✗ SSH connection failed on attempt $attempt"
            if [ $attempt -lt 5 ]; then
              echo "Waiting 5 seconds before retry..."
              sleep 5
            fi
          fi
        done
        
        # If SSH failed, provide detailed diagnostics
        if [ "$SSH_SUCCESS" = false ]; then
          echo "=== SSH Connection Failed - Detailed Diagnostics ==="
          echo "Container logs:"
          podman logs spooky-test-server
          
          echo "SSH daemon status in container:"
          podman exec spooky-test-server ps aux | grep sshd || echo "No SSH daemon found"
          
          echo "SSH daemon logs in container:"
          podman exec spooky-test-server journalctl -u ssh 2>/dev/null || echo "No SSH service logs found"
          
          echo "Network connectivity test:"
          podman exec spooky-test-server netstat -tlnp | grep :22 || echo "No SSH port found listening"
          
          echo "SSH key permissions in container:"
          podman exec spooky-test-server ls -la /home/testuser/.ssh/ || echo "Could not check SSH directory"
          
          echo "Local SSH key permissions:"
          ls -la ~/.ssh/id_ed25519*
          
          exit 1
        fi
        
        # Additional connectivity tests
        echo "=== Additional Connectivity Tests ==="
        echo "Testing basic commands via SSH:"
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p 2221 testuser@localhost "whoami && hostname && pwd" || echo "Basic command test failed"
        
        # Store container info for tests
        echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV
        echo "SSH_PORT=2221" >> $GITHUB_ENV
        
        echo "=== Container Setup Complete ==="

    - name: Update test configuration
      run: |
        # Create updated test configuration with correct user and key path
        cat > examples/test-environment/test-config.hcl << EOF
        # Test configuration for spooky SSH automation tool
        # Points to the test environment SSH server

        # Define test server
        server "spooky-test-server" {
          host     = "localhost"
          port     = 2221
          user     = "testuser"
          key_file = "$HOME/.ssh/id_ed25519"
          tags = {
            environment = "testing"
            role        = "test-server"
          }
        }

        # Define test actions
        action "check-status" {
          description = "Check system status"
          command     = "uptime && df -h"
          servers     = ["spooky-test-server"]
          parallel    = true
        }

        action "check-ssh-keys" {
          description = "Check SSH key configuration"
          command     = "ls -la ~/.ssh/ && echo 'SSH keys mounted successfully'"
          servers     = ["spooky-test-server"]
          parallel    = true
        }

        action "test-connection" {
          description = "Test basic connectivity"
          command     = "echo 'Connection test successful' && hostname && whoami"
          servers     = ["spooky-test-server"]
          parallel    = true
        }
        EOF

    - name: Build spooky binary
      run: |
        # Create build directory
        mkdir -p build
        
        # Build the spooky binary
        go build -o build/spooky main.go
        
        # Verify binary was created
        ls -la build/

    - name: Run integration tests
      run: |
        # Set environment variables for tests
        export SPOOKY_TEST_SSH_HOST=localhost
        export SPOOKY_TEST_SSH_PORT=2221
        export SPOOKY_TEST_SSH_USER=testuser
        export SPOOKY_TEST_SSH_KEY=$HOME/.ssh/id_ed25519
        
        # Show current directory and files
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "Files in build directory:"
        ls -la build/ || echo "Build directory not found"
        
        echo "Files in examples/test-environment:"
        ls -la examples/test-environment/ || echo "Test environment directory not found"
        
        # Final pre-test SSH connectivity verification
        echo "=== Pre-test SSH Verification ==="
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p 2221 testuser@localhost "echo 'SSH connection successful - pre-test'" || {
          echo "SSH connection failed before tests - container may have become unhealthy"
          echo "Container status:"
          podman ps --filter name=spooky-test-server
          echo "Container logs:"
          podman logs spooky-test-server
          exit 1
        }
        
        # Run integration tests with podman flag
        echo "Running Go integration tests..."
        go test ./tests/integration -v -podman

    - name: Post-test container health check
      if: always()
      run: |
        echo "=== Post-test Container Health Check ==="
        
        # Check if container is still running
        if podman ps --filter name=spooky-test-server --format "{{.Status}}" | grep -q "Up"; then
          echo "✓ Container is still running after tests"
          
          # Verify SSH is still working
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p 2221 testuser@localhost "echo 'SSH still working after tests'" 2>/dev/null; then
            echo "✓ SSH is still functional after tests"
          else
            echo "✗ SSH connection failed after tests"
            echo "Container logs after tests:"
            podman logs spooky-test-server --tail=20
          fi
        else
          echo "✗ Container is not running after tests"
          echo "Container status:"
          podman ps -a --filter name=spooky-test-server
          echo "Container logs:"
          podman logs spooky-test-server || echo "No logs available"
        fi
        
        # Show container resource usage
        echo "Container resource usage:"
        podman stats spooky-test-server --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" 2>/dev/null || echo "Could not get container stats"

    - name: Cleanup containers
      if: always()
      run: |
        # Stop and remove containers
        podman stop spooky-test-server || true
        podman rm spooky-test-server || true
        
        # Remove images
        podman rmi spooky-test-ssh || true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          *.log
        retention-days: 7 