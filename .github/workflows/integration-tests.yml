name: Integration Tests

on:
  workflow_run:
    workflows: ["Unit Tests"]
    types: [completed]
  workflow_dispatch:

jobs:
  run-integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Enable user namespaces
      run: |
        echo 'kernel.unprivileged_userns_clone=1' | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p

    - name: Configure subuid/subgid for runner user
      run: |
        sudo usermod --add-subuids 100000-165535 $USER
        sudo usermod --add-subgids 100000-165535 $USER

    - name: Create Podman configuration directory
      run: |
        mkdir -p ~/.config/containers

    - name: Create Podman containers.conf
      run: |
        cat > ~/.config/containers/containers.conf << EOF
        [engine]
        active_service = "podman"
        
        [engine.service_destinations]
        [engine.service_destinations.podman]
        uri = "unix:///run/user/\${UID}/podman/podman.sock"
        
        [engine.service_destinations.podman.connection_timeout_seconds]
        uri = 20
        
        [engine.service_destinations.podman.connection_override]
        uri = "unix:///run/user/\${UID}/podman/podman.sock"
        EOF

    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman

    - name: Verify Podman installation
      run: |
        podman --version

    - name: Generate SSH key pair
      run: |
        ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N "" -C "github-actions@spooky"

    - name: Set SSH key permissions
      run: |
        chmod 600 ~/.ssh/id_ed25519
        chmod 644 ~/.ssh/id_ed25519.pub

    - name: Create Dockerfile for SSH container
      run: |
        cat > Dockerfile.ssh << 'EOF'
        FROM debian:12-slim
        
        # Install SSH server and required packages
        RUN apt-get update && apt-get install -y \
            openssh-server \
            sudo \
            && rm -rf /var/lib/apt/lists/*
        
        # Create SSH directory
        RUN mkdir -p /var/run/sshd
        
        # Create test user
        RUN useradd -m -s /bin/bash testuser && \
            echo "testuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
        
        # Create .ssh directory for testuser
        RUN mkdir -p /home/testuser/.ssh && \
            chown testuser:testuser /home/testuser/.ssh && \
            chmod 700 /home/testuser/.ssh
        
        # Copy SSH public key
        COPY id_ed25519.pub /home/testuser/.ssh/authorized_keys
        RUN chown testuser:testuser /home/testuser/.ssh/authorized_keys && \
            chmod 600 /home/testuser/.ssh/authorized_keys
        
        # Configure SSH
        RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config && \
            sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config && \
            sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && \
            sed -i 's/#AuthorizedKeysFile/AuthorizedKeysFile/' /etc/ssh/sshd_config && \
            echo "StrictModes no" >> /etc/ssh/sshd_config
        
        # Expose SSH port
        EXPOSE 22
        
        # Start SSH daemon
        CMD ["/usr/sbin/sshd", "-D"]
        EOF

    - name: Copy SSH public key to build context
      run: |
        cp ~/.ssh/id_ed25519.pub .

    - name: Build SSH container image
      run: |
        podman build -f Dockerfile.ssh -t spooky-test-ssh .

    - name: Create Dockerfile for no-SSH container
      run: |
        cat > Dockerfile.no-ssh << 'EOF'
        FROM debian:12-slim
        
        # Create test user
        RUN useradd -m -s /bin/bash testuser
        
        # Just keep container running without SSH
        CMD ["tail", "-f", "/dev/null"]
        EOF

    - name: Build no-SSH container image
      run: |
        podman build -f Dockerfile.no-ssh -t spooky-test-no-ssh .

    - name: Create Dockerfile for SSH-no-key container
      run: |
        cat > Dockerfile.ssh-no-key << 'EOF'
        FROM debian:12-slim
        
        # Install SSH server and required packages
        RUN apt-get update && apt-get install -y \
            openssh-server \
            sudo \
            && rm -rf /var/lib/apt/lists/*
        
        # Create SSH directory
        RUN mkdir -p /var/run/sshd
        
        # Create test user
        RUN useradd -m -s /bin/bash testuser && \
            echo "testuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
        
        # Create .ssh directory for testuser but DON'T add authorized_keys
        RUN mkdir -p /home/testuser/.ssh && \
            chown testuser:testuser /home/testuser/.ssh && \
            chmod 700 /home/testuser/.ssh
        
        # Configure SSH
        RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config && \
            sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config && \
            sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && \
            sed -i 's/#AuthorizedKeysFile/AuthorizedKeysFile/' /etc/ssh/sshd_config && \
            echo "StrictModes no" >> /etc/ssh/sshd_config
        
        # Expose SSH port
        EXPOSE 22
        
        # Start SSH daemon
        CMD ["/usr/sbin/sshd", "-D"]
        EOF

    - name: Build SSH-no-key container image
      run: |
        podman build -f Dockerfile.ssh-no-key -t spooky-test-ssh-no-key .

    - name: Start SSH containers
      run: |
        # Start 7 working SSH containers on different ports
        for i in {1..7}; do
          port=$((2220 + $i))
          container_name="spooky-test-server-$i"
          
          echo "Starting working SSH container $i on port $port..."
          podman run -d \
            --name "$container_name" \
            -p "$port:22" \
            spooky-test-ssh
        done
        
        # Start container with no SSH running (port 2228)
        echo "Starting container with no SSH on port 2228..."
        podman run -d \
          --name "spooky-test-no-ssh" \
          -p "2228:22" \
          spooky-test-no-ssh
        
        # Start container with SSH but no authorized key (port 2229)
        echo "Starting container with SSH but no key on port 2229..."
        podman run -d \
          --name "spooky-test-ssh-no-key" \
          -p "2229:22" \
          spooky-test-ssh-no-key
        
        # Wait for all containers to be ready
        echo "Waiting for all containers to be ready..."
        for i in {1..30}; do
          working_count=$(podman ps --filter name=spooky-test-server --format "{{.Status}}" | grep -c "Up" || echo "0")
          no_ssh_count=$(podman ps --filter name=spooky-test-no-ssh --format "{{.Status}}" | grep -c "Up" || echo "0")
          no_key_count=$(podman ps --filter name=spooky-test-ssh-no-key --format "{{.Status}}" | grep -c "Up" || echo "0")
          total_running=$((working_count + no_ssh_count + no_key_count))
          
          if [ "$total_running" -eq 9 ]; then
            echo "All 9 containers are running (attempt $i/30)"
            break
          fi
          echo "Waiting for containers to start... ($total_running/9 running, attempt $i/30)"
          sleep 2
        done

    - name: Update test configuration paths
      run: |
        # Update SSH key paths in configuration files to use absolute paths
        sed -i "s|~/.ssh/id_ed25519|$HOME/.ssh/id_ed25519|g" examples/actions/integration-*.hcl

    - name: Build binary
      run: |
        mkdir -p build
        go build -o build/spooky main.go
        chmod +x build/spooky
        ls -la build/

    - name: Run integration tests
      run: |
        # Set environment variables for tests
        export SPOOKY_TEST_SSH_HOST=localhost
        export SPOOKY_TEST_SSH_PORT=2221
        export SPOOKY_TEST_SSH_USER=testuser
        export SPOOKY_TEST_SSH_KEY=$HOME/.ssh/id_ed25519
        
        # Show current directory and files
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "Files in build directory:"
        ls -la build/ || echo "Build directory not found"
        
        echo "Files in examples/test-environment:"
        ls -la examples/test-environment/ || echo "Test environment directory not found"
        
        # Final pre-test SSH connectivity verification for working containers
        echo "=== Pre-test SSH Verification for Working Containers ==="
        for i in {1..7}; do
          port=$((2220 + $i))
          container_name="spooky-test-server-$i"
          
          echo "Testing SSH connection to container $i on port $port..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p "$port" testuser@localhost "echo 'SSH connection successful - pre-test on container $i'" || {
            echo "SSH connection failed to container $i before tests - container may have become unhealthy"
            echo "Container status:"
            podman ps --filter name="$container_name"
            echo "Container logs:"
            podman logs "$container_name"
            exit 1
          }
          echo "✓ SSH connection to container $i successful"
        done
        
        # Test failure scenarios (these should fail)
        echo "=== Testing Failure Scenarios (Expected to Fail) ==="
        
        echo "Testing connection to no-SSH container (port 2228) - should fail..."
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p 2228 testuser@localhost "echo 'This should not work'" 2>/dev/null; then
          echo "✗ SSH connection to no-SSH container succeeded - this should have failed!"
          exit 1
        else
          echo "✓ SSH connection to no-SSH container correctly failed"
        fi
        
        echo "Testing connection to SSH-no-key container (port 2229) - should fail..."
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p 2229 testuser@localhost "echo 'This should not work'" 2>/dev/null; then
          echo "✗ SSH connection to SSH-no-key container succeeded - this should have failed!"
          exit 1
        else
          echo "✓ SSH connection to SSH-no-key container correctly failed"
        fi
        
        # Simple integration tests using shell commands
        echo "=== Running Simple Integration Tests ==="
        
        # Test 1: Time validation of simple config
        echo "Testing validate command with simple config..."
        start_time=$(date +%s.%N)
        ./build/spooky validate examples/actions/integration-simple-test.hcl || {
          echo "Validate command failed with simple config"
          exit 1
        }
        end_time=$(date +%s.%N)
        simple_validate_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Validate command passed with simple config in ${simple_validate_time}s"
        
        # Test 2: Time validation of working servers config
        echo "Testing validate command with working servers config..."
        start_time=$(date +%s.%N)
        ./build/spooky validate examples/actions/integration-working-servers.hcl || {
          echo "Validate command failed with working servers config"
          exit 1
        }
        end_time=$(date +%s.%N)
        working_validate_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Validate command passed with working servers config in ${working_validate_time}s"
        
        # Test 3: Time list command (simple config)
        echo "Testing list command with simple config..."
        start_time=$(date +%s.%N)
        ./build/spooky list examples/actions/integration-simple-test.hcl || {
          echo "List command failed with simple config"
          exit 1
        }
        end_time=$(date +%s.%N)
        simple_list_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ List command passed with simple config in ${simple_list_time}s"
        
        # Test 4: Time list command (working servers config)
        echo "Testing list command with working servers config..."
        start_time=$(date +%s.%N)
        ./build/spooky list examples/actions/integration-working-servers.hcl || {
          echo "List command failed with working servers config"
          exit 1
        }
        end_time=$(date +%s.%N)
        working_list_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ List command passed with working servers config in ${working_list_time}s"
        
        # Test 5: Execute command (simple config - 2 servers)
        echo "Testing execute command with simple config (2 servers)..."
        ./build/spooky execute examples/actions/integration-simple-test.hcl || {
          echo "Execute command failed with simple config"
          exit 1
        }
        echo "✓ Execute command passed with simple config"
        
        # Test 6: Execute command (working servers only - 7 servers, parallel execution)
        echo "Testing execute command with working servers only..."
        ./build/spooky execute examples/actions/integration-working-servers.hcl || {
          echo "Execute command failed with working servers config"
          exit 1
        }
        echo "✓ Execute command passed with working servers config"
        
        # Test 7: Test failure scenarios (these should fail as expected)
        echo "Testing failure scenarios (expected to fail)..."
        if ./build/spooky execute examples/actions/integration-failure-test.hcl 2>/dev/null; then
          echo "✗ Failure scenario test should have failed but succeeded"
          exit 1
        else
          echo "✓ Failure scenario test correctly failed as expected"
        fi
        
        # Test 8: Test mixed success/failure scenarios (should fail due to parallel execution behavior)
        echo "Testing mixed success/failure scenarios..."
        if ./build/spooky execute examples/actions/integration-mixed-test.hcl 2>/dev/null; then
          echo "✗ Mixed success/failure test should have failed but succeeded"
          exit 1
        else
          echo "✓ Mixed success/failure test correctly failed as expected (parallel execution fails on any server failure)"
        fi
        
        # Test 9: Time validation of small-scale configuration
        echo "Testing validation timing for small-scale configuration..."
        start_time=$(date +%s.%N)
        ./build/spooky validate examples/actions/small-scale-example.hcl || {
          echo "Small-scale validation failed"
          exit 1
        }
        end_time=$(date +%s.%N)
        small_scale_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Small-scale validation passed in ${small_scale_time}s"
        
        # Test 10: Time validation of medium-scale configuration
        echo "Testing validation timing for medium-scale configuration..."
        start_time=$(date +%s.%N)
        ./build/spooky validate examples/actions/medium-scale-example.hcl || {
          echo "Medium-scale validation failed"
          exit 1
        }
        end_time=$(date +%s.%N)
        medium_scale_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Medium-scale validation passed in ${medium_scale_time}s"
        
        # Test 11: Time list command for small-scale configuration
        echo "Testing list timing for small-scale configuration..."
        start_time=$(date +%s.%N)
        ./build/spooky list examples/actions/small-scale-example.hcl || {
          echo "Small-scale list failed"
          exit 1
        }
        end_time=$(date +%s.%N)
        small_scale_list_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Small-scale list passed in ${small_scale_list_time}s"
        
        # Test 12: Time list command for medium-scale configuration
        echo "Testing list timing for medium-scale configuration..."
        start_time=$(date +%s.%N)
        ./build/spooky list examples/actions/medium-scale-example.hcl || {
          echo "Medium-scale list failed"
          exit 1
        }
        end_time=$(date +%s.%N)
        medium_scale_list_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Medium-scale list passed in ${medium_scale_list_time}s"
        
        # Test 13: Time validation of large-scale configuration
        echo "Testing validation timing for large-scale configuration..."
        start_time=$(date +%s.%N)
        ./build/spooky validate examples/actions/large-scale-example.hcl || {
          echo "Large-scale validation failed"
          exit 1
        }
        end_time=$(date +%s.%N)
        large_scale_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Large-scale validation passed in ${large_scale_time}s"
        
        # Test 14: Time list command for large-scale configuration
        echo "Testing list timing for large-scale configuration..."
        start_time=$(date +%s.%N)
        ./build/spooky list examples/actions/large-scale-example.hcl || {
          echo "Large-scale list failed"
          exit 1
        }
        end_time=$(date +%s.%N)
        large_scale_list_time=$(echo "$end_time - $start_time" | bc -l)
        echo "✓ Large-scale list passed in ${large_scale_list_time}s"
        
        # Performance summary
        echo "=== Performance Summary ==="
        echo "Integration Test Configurations:"
        echo "  Simple config validation: ${simple_validate_time}s"
        echo "  Simple config list: ${simple_list_time}s"
        echo "  Working servers validation: ${working_validate_time}s"
        echo "  Working servers list: ${working_list_time}s"
        echo ""
        echo "Scale Test Configurations:"
        echo "  Small-scale validation: ${small_scale_time}s"
        echo "  Small-scale list: ${small_scale_list_time}s"
        echo "  Medium-scale validation: ${medium_scale_time}s"
        echo "  Medium-scale list: ${medium_scale_list_time}s"
        echo "  Large-scale validation: ${large_scale_time}s"
        echo "  Large-scale list: ${large_scale_list_time}s"
        
        # Test 4: Test with invalid config
        echo "Testing invalid config handling..."
        echo "invalid hcl content" > /tmp/invalid.hcl
        if ./build/spooky validate /tmp/invalid.hcl 2>/dev/null; then
          echo "✗ Validate should have failed with invalid config"
          exit 1
        else
          echo "✓ Invalid config properly rejected"
        fi
        
        # Test 5: Test with non-existent config
        echo "Testing non-existent config handling..."
        if ./build/spooky validate /tmp/nonexistent.hcl 2>/dev/null; then
          echo "✗ Validate should have failed with non-existent config"
          exit 1
        else
          echo "✓ Non-existent config properly rejected"
        fi
        
        echo "=== All Integration Tests Passed ==="

    - name: Stop containers
      if: always()
      run: |
        echo "=== Stopping containers ==="
        for i in {1..7}; do
          container_name="spooky-test-server-$i"
          echo "Stopping container $i..."
          podman stop "$container_name" || true
        done
        
        echo "Stopping failure test containers..."
        podman stop spooky-test-no-ssh || true
        podman stop spooky-test-ssh-no-key || true

    - name: Remove containers
      if: always()
      run: |
        echo "=== Removing containers ==="
        for i in {1..7}; do
          container_name="spooky-test-server-$i"
          echo "Removing container $i..."
          podman rm "$container_name" || true
        done
        
        echo "Removing failure test containers..."
        podman rm spooky-test-no-ssh || true
        podman rm spooky-test-ssh-no-key || true

    - name: Remove container images
      if: always()
      run: |
        echo "=== Removing container images ==="
        podman rmi spooky-test-ssh || true
        podman rmi spooky-test-no-ssh || true
        podman rmi spooky-test-ssh-no-key || true

    - name: Remove SSH keys
      if: always()
      run: |
        echo "=== Removing SSH keys ==="
        rm -f ~/.ssh/id_ed25519 ~/.ssh/id_ed25519.pub || true

 