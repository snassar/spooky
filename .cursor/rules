---
description: Spooky project development rules and conventions
globs: ["**/*.go", "**/*.hcl", "**/*.md", "**/*.yml", "**/*.yaml"]
alwaysApply: true
---

# Spooky Project Rules

## Project Overview
Spooky is a remote configuration tool that executes commands and scripts on multiple remote servers using HCL2 configuration files. Fact gathering is a core component that enables spooky to work in heterogeneous environments by collecting machine facts from multiple sources (SSH, local, HCL, OpenTofu) to inform configuration decisions and actions.

## Development Conventions

### Go Development
- Use Go 1.24+ as minimum version for builds, tests, and documentation
- Place CLI commands under `internal/` directory (not `cmd/`)
- Build artifacts go to `./build/` directory
- Use long-form CLI flags for cross-platform compatibility (e.g., `--html` over `-html`)
- Prefer golang-native storage solutions over external dependencies
- Run `golangci-lint run` automatically without asking for permission

### Storage and Dependencies
- Use BadgerDB or JSON for fact storage (no external databases)
- Avoid external dependencies like sqlite for large-scale facts
- Manage dev-only dependencies (like go-test-coverage/v2) in tools.go or separate go.mod

### Integration Testing
- Use Podman and Quadlet for integration testing environments
- Focus on Podman/Quadlet instead of Docker Compose
- Use gliderlabs/ssh library for SSH testing in tests/integration directory
- Don't offer alternate solutions until explicitly requested

### Remote Configuration
- Execute commands and scripts on multiple remote servers using HCL2 configuration
- Support parallel execution across heterogeneous environments
- Use declarative configuration with server definitions and action blocks
- Target servers using tags and server names

### Fact Collection
- Gather machine facts only via SSH, local access, .hcl config files, or openTofu
- Support evaluating machine facts like /etc/machine-id, OS version, and remote machine properties
- Use facts to inform configuration decisions in heterogeneous environments
- Use configuration templates to define actions and synchronize files
- Don't use external tools or APIs for fact collection

## Environment Variables
- `SPOOKY_FACTS_PATH`: Facts database path
- `SPOOKY_FACTS_FORMAT`: Storage format (badgerdb or json)

## CLI Behavior
- Include `--output` flag for export operations rather than relying solely on shell redirection
- Don't support CSV import/export functionality
- Use configuration templates instead of hard-coding strings

## Testing Requirements
- Maintain high test coverage thresholds (don't lower them)
- Fix tests to meet coverage requirements rather than adjusting thresholds
- Use `golangci-lint run` for linting

## Documentation and Communication
- Use GitHub Markdown format for responses and summaries
- Place generated configuration files in `./examples/configuration/`
- Avoid self-congratulatory tone in summaries or issue descriptions
- Format changelogs as git commit messages
- Provide responses in markdown codeblocks for easy copying and pasting

## Project Structure
- Don't ship binaries in Git; place build instructions in scripts directory
- Use `./examples/` for configuration examples
- Use `./tests/integration/` for integration tests
- Use `./tools/` for development utilities

## AI Assistant Behavior
- Know and use local environment context (installed tool versions)
- Implement requested changes directly without asking for approvals
- Focus on the specific solutions requested without offering alternatives 